openapi: 3.0.3
info:
  title: NovaTime API
  version: 1.1.0
  description: Unified API for timesheets, tasks, collaboration, insights, SEO, and
    auth with pagination, errors, and security.
servers:
- url: https://api.novatime.example.com
tags:
- name: Tasks
- name: Assignments
- name: Time
- name: Timesheets
- name: Approvals
- name: Conversations
- name: AI
- name: SEO
- name: ABTests
- name: Insights
- name: Auth
security:
- bearerAuth: []
paths:
  /api/tasks:
    post:
      tags:
      - Tasks
      summary: Create a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
      - Tasks
      summary: List tasks
      parameters:
      - in: query
        name: project_id
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: OK
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  page:
                    $ref: '#/components/schemas/PageMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/tasks/{id}:
    patch:
      tags:
      - Tasks
      summary: Update a task
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/tasks/{id}/assignments:
    post:
      tags:
      - Assignments
      summary: Create assignment
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
      - Assignments
      summary: List assignments for task
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Assignment'
                  page:
                    $ref: '#/components/schemas/PageMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/time-entries:
    post:
      tags:
      - Time
      summary: Create time entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntry'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
      - Time
      summary: List time entries
      parameters:
      - in: query
        name: user_id
        schema:
          type: string
      - in: query
        name: range
        schema:
          type: string
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimeEntry'
                  page:
                    $ref: '#/components/schemas/PageMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/timesheets/{id}/submit:
    post:
      tags:
      - Timesheets
      summary: Submit timesheet
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Submitted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/timesheets/{id}/approve:
    post:
      tags:
      - Approvals
      summary: Approve timesheet
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Approved
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/conversations:
    post:
      tags:
      - Conversations
      summary: Create conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                channel_id:
                  type: string
                subject_ref:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                      - task
                      - project
                      - general
                    id:
                      type: string
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/messages:
    post:
      tags:
      - Conversations
      summary: Post message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Payload too large
  /api/ai/invoke:
    post:
      tags:
      - AI
      summary: Invoke AI assistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt_template_id:
                  type: string
                subject_ref:
                  type: object
                  properties:
                    type:
                      type: string
                    id:
                      type: string
                inputs:
                  type: object
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /api/seo/assets:
    get:
      tags:
      - SEO
      summary: Fetch SEO asset
      security: []
      parameters:
      - $ref: '#/components/parameters/Locale'
      - in: query
        name: slug
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SEOAsset'
    post:
      tags:
      - SEO
      summary: Create SEO asset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SEOAsset'
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/abtests:
    post:
      tags:
      - ABTests
      summary: Create A/B test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hypothesis:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                target:
                  type: string
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/abtests/{id}/results:
    get:
      tags:
      - ABTests
      summary: Fetch A/B test results
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/insights:
    get:
      tags:
      - Insights
      summary: Team insights
      parameters:
      - in: query
        name: scope
        schema:
          type: string
      - in: query
        name: period
        schema:
          type: string
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/users/{id}/performance:
    get:
      tags:
      - Insights
      summary: Worker 360 snapshots
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: range
        schema:
          type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/auth/magic-link:
    post:
      tags:
      - Auth
      summary: Request magic link
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Sent
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /api/auth/oidc/callback:
    post:
      tags:
      - Auth
      summary: OIDC callback
      security: []
      responses:
        '200':
          description: OK
  /api/auth/passkey/attest:
    post:
      tags:
      - Auth
      summary: Register passkey
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/auth/passkey/assert:
    post:
      tags:
      - Auth
      summary: Authenticate with passkey
      security: []
      responses:
        '200':
          description: OK
  /api/auth/me:
    get:
      tags:
      - Auth
      summary: Current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    openId:
      type: openIdConnect
      openIdConnectUrl: https://auth.novatime.example.com/.well-known/openid-configuration
  parameters:
    Page:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
      description: 1-based page number
    PageSize:
      in: query
      name: page_size
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 50
      description: Items per page (max 200)
    Cursor:
      in: query
      name: cursor
      schema:
        type: string
      description: Opaque cursor for pagination
    Locale:
      in: query
      name: locale
      schema:
        type: string
  headers:
    X-RateLimit-Limit:
      schema:
        type: integer
      description: Request limit for the window
    X-RateLimit-Remaining:
      schema:
        type: integer
      description: Remaining requests in the window
    X-RateLimit-Reset:
      schema:
        type: integer
      description: Epoch seconds when the window resets
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    TooManyRequests:
      description: Too many requests
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/X-RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/X-RateLimit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
  schemas:
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
        errors:
          type: object
          additionalProperties: true
    PageMeta:
      type: object
      properties:
        page:
          type: integer
        page_size:
          type: integer
        total:
          type: integer
        next_cursor:
          type: string
          nullable: true
    Task:
      type: object
      properties:
        id:
          type: string
        project_id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - todo
          - in_progress
          - review
          - done
          - blocked
        priority:
          type: string
          enum:
          - P1
          - P2
          - P3
        estimate_hours:
          type: number
        due_at:
          type: string
          format: date-time
        labels:
          type: array
          items:
            type: string
        dependencies:
          type: array
          items:
            type: string
        created_by:
          type: string
        updated_at:
          type: string
          format: date-time
      required:
      - title
      - project_id
    Assignment:
      type: object
      properties:
        id:
          type: string
        task_id:
          type: string
        user_id:
          type: string
        role:
          type: string
          enum:
          - owner
          - reviewer
          - assistant
        load_percent:
          type: number
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time
        source:
          type: string
          enum:
          - manual
          - ai
        created_at:
          type: string
          format: date-time
      required:
      - task_id
      - user_id
      - role
    TimeEntry:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        task_id:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        duration_minutes:
          type: integer
        billable:
          type: boolean
        notes:
          type: string
        source:
          type: string
        geo:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
      required:
      - user_id
      - start
    Timesheet:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        period:
          type: string
        status:
          type: string
          enum:
          - open
          - submitted
          - approved
          - rejected
          - locked
        submitted_at:
          type: string
          format: date-time
        approved_by:
          type: string
    Message:
      type: object
      properties:
        id:
          type: string
        conversation_id:
          type: string
        author_id:
          type: string
        text:
          type: string
        mentions:
          type: array
          items:
            type: string
        attachments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              url:
                type: string
                format: uri
        created_at:
          type: string
          format: date-time
        thread_id:
          type: string
      required:
      - conversation_id
      - author_id
      - text
    SEOAsset:
      type: object
      properties:
        id:
          type: string
        slug:
          type: string
        locale:
          type: string
        title:
          type: string
        content_md:
          type: string
        keywords:
          type: array
          items:
            type: string
        schema_type:
          type: string
          enum:
          - article
          - faq
          - comparison
          - calculator
        publish_state:
          type: string
          enum:
          - draft
          - review
          - published
          - ab_test
        ab_test_id:
          type: string
        updated_at:
          type: string
          format: date-time
      required:
      - slug
      - locale
      - title
      - content_md
