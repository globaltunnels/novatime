name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: novatime_test
          POSTGRES_USER: novatime
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev libgdal-dev gdal-bin

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install coverage

    - name: Run migrations
      run: |
        python backend/manage.py migrate
      env:
        DB_NAME: novatime_test
        DB_USER: novatime
        DB_PASSWORD: password
        DB_HOST: localhost
        DB_PORT: 5432
        SECRET_KEY: test-secret-key

    - name: Run tests
      run: |
        coverage run backend/manage.py test
        coverage report
        coverage xml
      env:
        DB_NAME: novatime_test
        DB_USER: novatime
        DB_PASSWORD: password
        DB_HOST: localhost
        DB_PORT: 5432
        SECRET_KEY: test-secret-key
        REDIS_URL: redis://localhost:6379/0

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Run Black (code formatting)
      run: black --check --diff .

    - name: Run isort (import sorting)
      run: isort --check-only --diff .

    - name: Run flake8 (linting)
      run: flake8 .

    - name: Run mypy (type checking)
      run: mypy .

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml] pip-audit

    - name: Run Safety (vulnerability scanning)
      run: safety check

    - name: Run Bandit (security linting)
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Run pip-audit (dependency vulnerability check)
      run: pip-audit --output json -o pip-audit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          pip-audit-report.json

  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Generate SBOM
      run: |
        pip install cyclonedx-bom
        cyclonedx-py requirements --format json -o sbom.json || true

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sbom
        path: sbom.json