# Generated by Django 4.2.7 on 2025-08-28 23:26

import ai_services.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("time_entries", "0001_initial"),
        ("organizations", "0001_initial"),
        ("tasks", "0001_initial"),
        ("projects", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TaskAssignmentAlternative",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("ranking", models.PositiveIntegerField()),
                ("reasoning", models.TextField()),
            ],
            options={
                "db_table": "task_assignment_alternatives",
                "ordering": ["ranking"],
            },
        ),
        migrations.CreateModel(
            name="TaskAssignmentRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("workload_balancing", "Workload Balancing"),
                            ("skill_matching", "Skill Matching"),
                            ("performance_based", "Performance Based"),
                            ("deadline_urgency", "Deadline Urgency"),
                            ("collaboration_pattern", "Collaboration Pattern"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("reasoning", models.TextField()),
                (
                    "analysis_data",
                    models.JSONField(default=ai_services.models.default_dict),
                ),
                (
                    "estimated_completion_time",
                    models.DurationField(blank=True, null=True),
                ),
                (
                    "predicted_quality_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "workload_impact",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("auto_applied", "Auto Applied"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("manager_feedback", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "alternative_assignees",
                    models.ManyToManyField(
                        related_name="alternative_task_recommendations",
                        through="ai_services.TaskAssignmentAlternative",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_recommendations",
                        to="projects.project",
                    ),
                ),
                (
                    "recommended_assignee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_recommendations",
                        to="tasks.task",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_recommendations",
                        to="organizations.workspace",
                    ),
                ),
            ],
            options={
                "db_table": "task_assignment_recommendations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="taskassignmentalternative",
            name="recommendation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="alternatives",
                to="ai_services.taskassignmentrecommendation",
            ),
        ),
        migrations.AddField(
            model_name="taskassignmentalternative",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignment_alternatives",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="SmartTimesheetSuggestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "suggestion_type",
                    models.CharField(
                        choices=[
                            ("pattern_based", "Pattern Based"),
                            ("calendar_sync", "Calendar Sync"),
                            ("activity_detection", "Activity Detection"),
                            ("project_deadline", "Project Deadline"),
                        ],
                        max_length=50,
                    ),
                ),
                ("date", models.DateField()),
                ("suggested_start_time", models.TimeField()),
                ("suggested_end_time", models.TimeField()),
                ("suggested_duration_minutes", models.PositiveIntegerField()),
                ("suggested_description", models.TextField()),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("reasoning", models.TextField()),
                (
                    "source_data",
                    models.JSONField(default=ai_services.models.default_dict),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("modified", "Modified"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("user_feedback", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "generated_time_entry",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ai_suggestions",
                        to="time_entries.timeentry",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timesheet_suggestions",
                        to="projects.project",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="timesheet_suggestions",
                        to="tasks.task",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timesheet_suggestions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timesheet_suggestions",
                        to="organizations.workspace",
                    ),
                ),
            ],
            options={
                "db_table": "smart_timesheet_suggestions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AIModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("timesheet_generation", "Timesheet Generation"),
                            ("task_assignment", "Task Assignment"),
                            ("time_prediction", "Time Prediction"),
                            ("project_estimation", "Project Estimation"),
                            ("anomaly_detection", "Anomaly Detection"),
                            ("productivity_analysis", "Productivity Analysis"),
                        ],
                        max_length=50,
                    ),
                ),
                ("version", models.CharField(max_length=50)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("training", "Training"),
                            ("inactive", "Inactive"),
                            ("deprecated", "Deprecated"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "model_config",
                    models.JSONField(default=ai_services.models.default_dict),
                ),
                ("training_data_path", models.CharField(blank=True, max_length=500)),
                ("model_file_path", models.CharField(blank=True, max_length=500)),
                (
                    "accuracy_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "precision_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "recall_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_trained_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "ai_models",
                "unique_together": {("model_type", "version")},
            },
        ),
        migrations.CreateModel(
            name="AIJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("timesheet_generation", "Generate Timesheet"),
                            ("task_assignment", "Assign Tasks"),
                            ("time_prediction", "Predict Time"),
                            ("project_estimation", "Estimate Project"),
                            ("anomaly_detection", "Detect Anomalies"),
                            ("productivity_analysis", "Analyze Productivity"),
                            ("model_training", "Train Model"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                (
                    "input_data",
                    models.JSONField(default=ai_services.models.default_dict),
                ),
                (
                    "output_data",
                    models.JSONField(default=ai_services.models.default_dict),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("progress_percentage", models.PositiveIntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("processing_time", models.DurationField(blank=True, null=True)),
                (
                    "confidence_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "result_metadata",
                    models.JSONField(default=ai_services.models.default_dict),
                ),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="ai_services.aimodel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_jobs",
                        to="organizations.workspace",
                    ),
                ),
            ],
            options={
                "db_table": "ai_jobs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AIInsight",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "insight_type",
                    models.CharField(
                        choices=[
                            ("productivity_trend", "Productivity Trend"),
                            ("time_pattern", "Time Pattern"),
                            ("project_risk", "Project Risk"),
                            ("resource_optimization", "Resource Optimization"),
                            ("burnout_prediction", "Burnout Prediction"),
                            ("efficiency_opportunity", "Efficiency Opportunity"),
                        ],
                        max_length=50,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="info",
                        max_length=20,
                    ),
                ),
                (
                    "insight_data",
                    models.JSONField(default=ai_services.models.default_dict),
                ),
                (
                    "recommendations",
                    models.JSONField(default=ai_services.models.default_list),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("valid_until", models.DateTimeField(blank=True, null=True)),
                ("is_acknowledged", models.BooleanField(default=False)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_insights",
                        to="projects.project",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_insights",
                        to="organizations.workspace",
                    ),
                ),
            ],
            options={
                "db_table": "ai_insights",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="taskassignmentrecommendation",
            index=models.Index(
                fields=["task", "status"], name="task_assign_task_id_4a3c28_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskassignmentrecommendation",
            index=models.Index(
                fields=["recommended_assignee", "status", "-created_at"],
                name="task_assign_recomme_25b345_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="taskassignmentrecommendation",
            index=models.Index(
                fields=["workspace", "status", "-created_at"],
                name="task_assign_workspa_c47e6f_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taskassignmentalternative",
            unique_together={("recommendation", "user")},
        ),
        migrations.AddIndex(
            model_name="smarttimesheetsuggestion",
            index=models.Index(
                fields=["user", "date", "status"], name="smart_times_user_id_0610bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="smarttimesheetsuggestion",
            index=models.Index(
                fields=["workspace", "status", "-created_at"],
                name="smart_times_workspa_566cee_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="smarttimesheetsuggestion",
            index=models.Index(
                fields=["project", "status"], name="smart_times_project_fe1c0c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aijob",
            index=models.Index(
                fields=["user", "status", "-created_at"],
                name="ai_jobs_user_id_5bac59_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aijob",
            index=models.Index(
                fields=["workspace", "job_type", "-created_at"],
                name="ai_jobs_workspa_99d805_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aijob",
            index=models.Index(
                fields=["status", "priority", "created_at"],
                name="ai_jobs_status_f03316_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiinsight",
            index=models.Index(
                fields=["workspace", "insight_type", "-created_at"],
                name="ai_insights_workspa_1b5cd2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiinsight",
            index=models.Index(
                fields=["user", "is_acknowledged", "-created_at"],
                name="ai_insights_user_id_afd417_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiinsight",
            index=models.Index(
                fields=["project", "severity", "-created_at"],
                name="ai_insights_project_80a5dc_idx",
            ),
        ),
    ]
